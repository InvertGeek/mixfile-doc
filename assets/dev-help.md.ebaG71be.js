import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.6vKcgtAV.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"dev-help.md","filePath":"dev-help.md"}'),e={name:"dev-help.md"};function h(p,s,t,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="局域网服务器" tabindex="-1">局域网服务器 <a class="header-anchor" href="#局域网服务器" aria-label="Permalink to &quot;局域网服务器&quot;">​</a></h2><p>/api/upload/文件名 使用put请求即可上传文件,成功后会返回分享码(长分享码格式) <br> 可添加参数add=false,上传过后不会自动添加到历史记录和收藏 <br> /api/download/文件名(可选)?s=分享码 可直接下载或预览文件 <br> 可添加参数referer=强制覆盖分享码自带的referer <br> /api/file_info?s=分享码 查看文件信息</p><h2 id="uri-api-安卓版" tabindex="-1">URI API(安卓版) <a class="header-anchor" href="#uri-api-安卓版" aria-label="Permalink to &quot;URI API(安卓版)&quot;">​</a></h2><p>MixFile开放了许多uri api,可通过这些uri调用或启动mixfile的服务 <br> uri可通过网页js(直接跳转href即可)或安卓intend启动 <br> mixfile://start 可直接后台启动局域网服务器 <br> 网页点击mf://开头的分享码 可直接弹出文件信息窗口</p><h2 id="自定义线路-http" tabindex="-1">自定义线路(Http) <a class="header-anchor" href="#自定义线路-http" aria-label="Permalink to &quot;自定义线路(Http)&quot;">​</a></h2><p>需要自行使用其他编程语言开发一个http服务器接收put和get请求 <br> get返回填充的图片(推荐小于10kb),put负责上传 <br> 地址填写<a href="http://xn--zfru1gfr6bz63i" target="_blank" rel="noreferrer">http://服务器地址</a>:端口 <br> referer填写下载时的referer请求头(会编码到生成的分享码中) <br> 可参考项目： <br><a href="https://github.com/InvertGeek/mixfileexamplejs" target="_blank" rel="noreferrer">https://github.com/InvertGeek/mixfileexamplejs</a> <br> 需要安装nodejs,运行npm i 安装依赖后点击start.bat即可启动 <br> 本地运行填写例子: 地址填写<a href="http://xn--ces6a78a93lq86c" target="_blank" rel="noreferrer">http://局域网地址</a>:端口 例如<a href="https://192.168.0.1:50001" target="_blank" rel="noreferrer">https://192.168.0.1:50001</a> <br> referer填写<a href="https://weibo.com/" target="_blank" rel="noreferrer">https://weibo.com/</a> <br> 需要无压缩,如果图片被压缩数据会丢失 <br> 上传默认采用kotlin协程并发上传,默认并发10,也就是10个图片同时上传,如果遇到频率限制调低并发即可</p><h2 id="js自定义线路" tabindex="-1">JS自定义线路 <a class="header-anchor" href="#js自定义线路" aria-label="Permalink to &quot;JS自定义线路&quot;">​</a></h2><p><a href="https://github.com/InvertGeek/mixfile-scripts" target="_blank" rel="noreferrer">https://github.com/InvertGeek/mixfile-scripts</a> <br> 无需服务端即可运行，命令行配置填写js文件名称即可 <br> 支持部分es6语法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用print代替console.log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">全局变量</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAGE_DATA</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //加密后的图片base64</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HEAD_SIZE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //原图片大小</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">支持的函数列表</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">atob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base64) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//解码base64,返回字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">btoa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(字符串) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//将字符串编码为base64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(算法,base64) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//支持MD5 SHA256等算法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//例如: hash(&quot;MD5&quot;,btoa(&quot;123&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendBase64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(base64,base64)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//拼接两串base64的二进制，返回base64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">encodeUrl,decodeUrl,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//url编码解码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a,b,c) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在控制台输出内容</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(方法,url,body,headers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//发送http请求</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回{statusCode,text,rawData,headers} 数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//rawData为base64格式响应体,text为纯文本</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//body支持字符串,对象,数组</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对象会自动转为formData,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//对象中使用 [文件数据(base64),文件名,mime类型] 代表文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//数组包裹base64为二进制格式请求体,格式为: [base64]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submitForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url,formData,headers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//提交表单(已过时,推荐使用request)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用 [文件数据(base64),文件名,mime类型] 代表文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回base64格式响应体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(方法,url,body,headers) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//发送http请求(已过时,推荐使用request)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//body需要为base64格式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回base64格式响应体</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setReferer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(字符串) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置下载时的referer请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//全局内存缓存:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">putCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key,value,expire seconds) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//value只支持字符串,expire为-1永不过期</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//全局互斥锁:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key,func) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//返回func执行结果</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例如lock(&quot;abc&quot;,()=&gt;1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码例子:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`cookie value\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> referer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置下载时的referer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setReferer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(referer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用[]数组包裹base64代表二进制文件数据,格式为: [文件数据,文件名,mime类型]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> formData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     file: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IMAGE_DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.gif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image/gif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    referer,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cookie,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">statusCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/api/upload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, formData, headers);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.url.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;?&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;上传成功,图片地址: &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在最后一行填写图片地址表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result;</span></span></code></pre></div><h2 id="集成mixfilecore" tabindex="-1">集成MixFileCore <a class="header-anchor" href="#集成mixfilecore" aria-label="Permalink to &quot;集成MixFileCore&quot;">​</a></h2><p>如果你想在自己的应用内集成MixFile,可使用 <a href="https://github.com/InvertGeek/mixfile-core" target="_blank" rel="noreferrer">https://github.com/InvertGeek/mixfile-core</a></p><h2 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h2><p>命令行自行打包的指令: ./gradlew shadowJar <br> 推荐网站: <a href="https://curlconverter.com/node-axios/" target="_blank" rel="noreferrer">https://curlconverter.com/node-axios/</a> <br> 可直接把curl转换为axios代码,浏览器中右键复制请求为curl即可</p>`,13)]))}const c=i(e,[["render",h]]);export{g as __pageData,c as default};
